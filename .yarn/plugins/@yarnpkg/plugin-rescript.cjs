/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-rescript",
factory: function (require) {
var plugin=(()=>{var L=Object.create,h=Object.defineProperty;var U=Object.getOwnPropertyDescriptor;var Y=Object.getOwnPropertyNames;var J=Object.getPrototypeOf,W=Object.prototype.hasOwnProperty;var X=e=>h(e,"__esModule",{value:!0});var d=e=>{if(typeof require!="undefined")return require(e);throw new Error('Dynamic require of "'+e+'" is not supported')};var _=(e,t)=>{for(var c in t)h(e,c,{get:t[c],enumerable:!0})},q=(e,t,c)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of Y(t))!W.call(e,r)&&r!=="default"&&h(e,r,{get:()=>t[r],enumerable:!(c=U(t,r))||c.enumerable});return e},p=e=>q(X(h(e!=null?L(J(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var Q={};_(Q,{default:()=>K});var b=p(d("child_process"));var x=p(d("clipanion")),i=p(d("@yarnpkg/core")),a=p(d("@yarnpkg/fslib")),C=p(d("@yarnpkg/cli")),j=p(d("@yarnpkg/plugin-essentials")),k=p(d("@yarnpkg/plugin-pnp")),w=class extends C.BaseCommand{async execute(){if(!j.default.commands)throw new Error("Yarn commands are not found. Please upgrade to Yarn 2.");let t=0,c=await i.Configuration.find(this.context.cwd,this.context.plugins),{project:r,workspace:R}=await i.Project.find(c,this.context.cwd),l=new a.NodeFS;async function D(o,n){try{await l.symlinkPromise(o,n)}catch(s){(s==null?void 0:s.code)==="EEXIST"&&(await l.unlinkPromise(n),await D(o,n))}}let I=a.ppath.join(R.cwd,"bsconfig.json");if(!await l.existsPromise(I))return console.log("TODO: res init first"),0;let N=JSON.parse(await l.readFileAsync(I,"utf8")),E=N["bs-dependencies"]||[],M=N["bs-dev-dependencies"]||[];await r.resolveEverything({lockfileOnly:!0,report:new i.ThrowReport});let u=r.storedPackages.get(r.topLevelWorkspace.anchoredLocator.locatorHash),g=new Map,y=new Set;for(let o of E){let n=i.structUtils.parseIdent(o),s=u.dependencies.get(n.identHash);s?g.set(o,{ident:n,descriptor:s}):y.add(o)}let m=new Map,P=new Set;for(let o of M){let n=i.structUtils.parseIdent(o),s=u.dependencies.get(n.identHash);s?m.set(o,{ident:n,descriptor:s}):P.add(o)}{let o=x.Cli.from(j.default.commands);if(t=await o.run(["add",[...y].join(" ")],this.context),t!==0)return t;for(let n of y){let s=i.structUtils.parseIdent(n),f=u.dependencies.get(s.identHash);g.set(n,f)}if(t=await o.run(["add","--dev",[...P].join(" ")],this.context),t!==0)return t;for(let n of P){let s=i.structUtils.parseIdent(n),f=u.dependencies.get(s.identHash);m.set(n,f)}}if(t=await x.Cli.from(k.default.commands).run(["unplug",[...g.keys(),...m.keys()].join(" ")],this.context),t!==0)return t;let v=a.ppath.join(r.cwd,a.Filename.nodeModules),S=new Map([...g,...m]);for(let[o,{ident:n,descriptor:s}]of S){let f=r.storedResolutions.get(s.descriptorHash),A=r.storedPackages.get(f),B=k.pnpUtils.getUnpluggedPath(A,{configuration:r.configuration}),O=a.ppath.join(B,a.Filename.nodeModules,o),T=a.ppath.join(v,"@"+n.scope),F=a.ppath.join(v,o);await l.mkdirPromise(T,{recursive:!0}),await D(O,F)}return t}};w.paths=[["res","setup"]];var H=w;var z=()=>{let e=(0,b.spawn)("yarn",["res","setup"],{encoding:"utf8",shell:!0});e.stdout.on("data",console.log),e.stderr.on("data",console.error),e.on("close",t=>{t!==0&&process.exit(t),console.log("Setup ReScript successfully!")})},G={hooks:{afterAllInstalled:z},commands:[H]},K=G;return Q;})();
return plugin;
}
};
